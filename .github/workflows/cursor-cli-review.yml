name: Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: write
  contents: read
  issues: write
  repository-projects: read

jobs:
  code-review:
    runs-on: ubuntu-latest
    # Skip automated code review for draft PRs
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Configure git identity
        run: |
          git config user.name "Cursor Agent"
          git config user.email "cursoragent@cursor.com"

      - name: Perform automated code review
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          MODEL: gpt-5
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BLOCKING_REVIEW: ${{ vars.BLOCKING_REVIEW || 'false' }}
        run: |
          # Set up GitHub CLI authentication
          export GH_TOKEN="$GITHUB_TOKEN"

          # Authenticate GitHub CLI (skip login command to avoid GH_TOKEN warning)
          # GitHub CLI will automatically use GH_TOKEN from environment

          # Verify gh CLI is working and authenticated
          echo "GitHub CLI version:"
          gh --version
          echo "GitHub CLI auth status:"
          gh auth status

          # Create prompt file for cursor-agent
          # Use sed to replace placeholders with actual values
          cat > /tmp/review_prompt.txt << 'EOF'
          You are operating in a GitHub Actions runner performing automated code review. The gh CLI is available and authenticated via GH_TOKEN. You may comment on pull requests.

          Context:
          - Repo: __GITHUB_REPOSITORY__
          - PR Number: __PR_NUMBER__
          - PR Head SHA: __PR_HEAD_SHA__
          - PR Base SHA: __PR_BASE_SHA__
          - Blocking Review: __BLOCKING_REVIEW__

          Objectives:
          1) Re-check existing review comments and reply resolved when addressed.
          2) Review the current PR diff and flag only clear, high-severity issues.
          3) Leave very short inline comments (1-2 sentences) on changed lines only and a brief summary at the end.

          Procedure:
          - Get existing comments: gh pr view --json comments
          - Get diff: gh pr diff
          - Get changed files with patches to compute inline positions: gh api repos/__GITHUB_REPOSITORY__/pulls/__PR_NUMBER__/files --paginate --jq '.[] | {filename,patch}'
          - Compute exact inline anchors for each issue (file path + diff position). Comments MUST be placed inline on the changed line in the diff, not as top-level comments.
          - Detect prior top-level "no issues" style comments authored by this bot (match bodies like: "‚úÖ no issues", "No issues found", "LGTM").
          - If CURRENT run finds issues and any prior "no issues" comments exist:
            - Prefer to remove them to avoid confusion:
              - Try deleting top-level issue comments via: gh api -X DELETE repos/__GITHUB_REPOSITORY__/issues/comments/<comment_id>
              - If deletion isn't possible, minimize them via GraphQL "minimizeComment" or edit to prefix "[Superseded by new findings]".
            - If neither delete nor minimize is possible, reply to that comment: "‚ö†Ô∏è Superseded: issues were found in newer commits".
          - If a previously reported issue appears fixed by nearby changes, reply: ‚úÖ This issue appears to be resolved by the recent changes
          - Analyze ONLY for:
            - Null/undefined dereferences
            - Resource leaks (unclosed files or connections)
            - Injection (SQL/XSS)
            - Concurrency/race conditions
            - Missing error handling for critical operations
            - Obvious logic errors with incorrect behavior
            - Clear performance anti-patterns with measurable impact
            - Definitive security vulnerabilities
          - Avoid duplicates: skip if similar feedback already exists on or near the same lines.

          Commenting rules:
          - *Ï§ëÏöî*: Î™®Îì† ÏùëÎãµÏùÄ ÌïúÍµ≠Ïñ¥Î°ú Ìï¥Ï£ºÏÑ∏Ïöî.
          - Max 10 inline comments total; prioritize the most critical issues
          - One issue per comment; place on the exact changed line
          - All issue comments MUST be inline (anchored to a file and line/position in the PR diff)
          - Natural tone, specific and actionable; do not mention automated or high-confidence
          - Use emojis: üö® Critical üîí Security ‚ö° Performance ‚ö†Ô∏è Logic ‚úÖ Resolved ‚ú® Improvement

          Submission:
          - Submit one review containing inline comments plus a concise summary
          - Use only: gh pr review --comment
          - Do not use: gh pr review --approve or --request-changes

          Blocking behavior:
          - If BLOCKING_REVIEW is true and any üö® or üîí issues were posted: echo "CRITICAL_ISSUES_FOUND=true" >> $GITHUB_ENV
          - Otherwise: echo "CRITICAL_ISSUES_FOUND=false" >> $GITHUB_ENV
          - Always set CRITICAL_ISSUES_FOUND at the end
          EOF

          # Replace placeholders with actual values using environment variables
          export REPO_NAME="${{ github.repository }}"
          export PR_NUM="${{ github.event.pull_request.number }}"
          export HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          export BASE_SHA="${{ github.event.pull_request.base.sha }}"
          export BLOCK_REVIEW="${{ env.BLOCKING_REVIEW }}"

          # Safe replacement using awk to handle special characters
          awk -v repo="$REPO_NAME" \
               -v pr_num="$PR_NUM" \
               -v head_sha="$HEAD_SHA" \
               -v base_sha="$BASE_SHA" \
               -v block_review="$BLOCK_REVIEW" \
               '{
                 gsub(/__GITHUB_REPOSITORY__/, repo);
                 gsub(/__PR_NUMBER__/, pr_num);
                 gsub(/__PR_HEAD_SHA__/, head_sha);
                 gsub(/__PR_BASE_SHA__/, base_sha);
                 gsub(/__BLOCKING_REVIEW__/, block_review);
                 print;
               }' /tmp/review_prompt.txt > /tmp/review_prompt_final.txt && mv /tmp/review_prompt_final.txt /tmp/review_prompt.txt

          # Verify we can access the PR with the final values
          echo "Testing PR access with final values:"
          gh pr view $PR_NUM --json number,title || echo "‚ùå Cannot access PR"
          echo "PR access test completed"

          # Debug: Show the final prompt content
          echo "=== Final Prompt Content ==="
          cat /tmp/review_prompt.txt
          echo "=== End Prompt ==="

          # Run cursor-agent with the prompt file
          echo "=== Running cursor-agent ==="
          # Capture cursor-agent output for debugging
          CURSOR_OUTPUT=$(cursor-agent -p "$(cat /tmp/review_prompt.txt)" 2>&1)
          CURSOR_EXIT_CODE=$?

          echo "Cursor-agent exit code: $CURSOR_EXIT_CODE"
          echo "Cursor-agent output:"
          echo "$CURSOR_OUTPUT"

          # Check if cursor-agent actually tried to create comments
          if echo "$CURSOR_OUTPUT" | grep -q "gh pr review"; then
            echo "‚úÖ Cursor-agent attempted to create PR review"
          else
            echo "‚ùå Cursor-agent did not attempt to create PR review"
          fi

          echo "=== cursor-agent execution completed ==="

      - name: Check blocking review results
        if: env.BLOCKING_REVIEW == 'true'
        run: |
          echo "Checking for critical issues..."
          echo "CRITICAL_ISSUES_FOUND: ${CRITICAL_ISSUES_FOUND:-unset}"

          if [ "${CRITICAL_ISSUES_FOUND:-false}" = "true" ]; then
            echo "‚ùå Critical issues found and blocking review is enabled. Failing the workflow."
            exit 1
          else
            echo "‚úÖ No blocking issues found."
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -f /tmp/review_prompt.txt
          echo "‚úÖ Cleanup completed."